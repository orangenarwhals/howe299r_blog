<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Plotting Residuals (now with ~492 datapoints)</title>
      <link href="/howe299r_blog/2018/04/10/Plotting-Residuals-now-with-492-datapoints/"/>
      <url>/howe299r_blog/2018/04/10/Plotting-Residuals-now-with-492-datapoints/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p="">Update 13 April: Fixed K screenshot, which was of poor fit (before fixing code to generate forces to take<br>into account 3 datapoints per force.<br>Update: Added visual K confirmation (linear fit vs ridge), noted issue with Ridge &amp; fit_intercept <p></p><p>For this week, I generated graphs of the residuals of the torque estimate using the simple linear model: <code>torque = k * theta + constant</code>.</p><h1 id="Sanity-Check"><a href="#Sanity-Check" class="headerlink" title="Sanity Check"></a>Sanity Check</h1><p><a href="full_data_csv.png" class="gallery-item"><img src="full_data_csv.png" alt=""></a></p><p>Observe the “N” and “R” columns, which are the torque Y, and estimated torque<br>Y, respectively. Furthermore we have the residual itself in column “V”. The<br>estimates mostly pass the sanity check (seem reasonable). </p><p>Below I show K as calculated by <code>numpy.lstsq</code> vs <code>sklearn.linreg</code> vs `sklearn., as calculated across all 492 datapoints. We see that pure linear regression has the least error.</p><p><a href="K_linreg_numpy_ridge_comparison.png" title="Stiffness matrix comparison" class="gallery-item"><img src="K_linreg_numpy_ridge_comparison.png" alt="Stiffness matrix comparison"></a></p><p>Scikit Ridge regression library provides opportunity to turn off y-intercept term of model. Naturally this resulted in higher error (not shown). What’s interesting to me is that Ridge regression performs so poorly, I was under the impression that it was fairly similar to linear regression. TODO: investigate this further.</p><p>I had this brief moment of confusion where I thought Ridge seemed to fit better than linear regression, below you may see the difference between fitting with and without y-intercept.  </p><p>(NOTE: Following two graphs are using”fake data”, aka data I had not fixed yet)</p><p>Here is fit with intercept </p><p><a href="FAKEDATA_with_intercept.jpg" class="gallery-item"><img src="FAKEDATA_with_intercept.jpg" alt=""></a>{width=50%}</p><p>And with no intercept (aka line must pass through zero)</p><p><a href="FAKEDATA_no_intercept.jpg" class="gallery-item"><img src="FAKEDATA_no_intercept.jpg" alt=""></a>{width=50%}</p><p>The error rate with simple linear regression is not bad, a RMSE of 17.7 (g cm), which with average x position ~3.5 cm, is around <strong>5 g of force estimate error</strong> .</p><h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1><p><strong>Difference between numpy and sklearn K estimates</strong></p><p>Questions: As seen in above image, Numpy’s least squares answer for K – was very different from sklearns.  sklearn’s K looked more reasonable (didn’t have tiny values) – is this just due to normalization? Sklearn’s K passed the sanity check, but I did not check numpy’s K.  </p><p><strong>What to plot</strong><br>Do we really need <em>only</em> the torque residuals? Or should we also look at the theta or force or position residuals? I can’t think of a reason we would need the latter.</p><h1 id="Plots"><a href="#Plots" class="headerlink" title="Plots"></a>Plots</h1><p>As we ultimately wish to estimate torque, I calculated the torque residuals (for X and Y, aka roll and pitch respectively). I then plotted them against: $\hat{\tau}_x, \hat{\tau}_y, F_z, \theta_x, \theta_y, \theta_z, r_x, r_y$.</p><h2 id="Torque-Estimated"><a href="#Torque-Estimated" class="headerlink" title="Torque Estimated"></a>Torque Estimated</h2><p>I think that only (epsX vs torX) and (epsY vs torY) should be meaningful, but here are all four combinations (made my code easier).</p><ul><li>TorqueX, Estimated<br>  <a href="Torq Est X.png" class="gallery-item"><img src="Torq Est X.png" alt=""></a></li><li>TorqueY, Estimated<br>  <a href="Torq Est Y.png" class="gallery-item"><img src="Torq Est Y.png" alt=""></a></li></ul><h2 id="Force"><a href="#Force" class="headerlink" title="Force"></a>Force</h2><ul><li>ForceZ<br>  <a href="ForceZ.png" class="gallery-item"><img src="ForceZ.png" alt=""></a> </li></ul><h2 id="Thetas"><a href="#Thetas" class="headerlink" title="Thetas"></a>Thetas</h2><ul><li>ThetaX<br>  <a href="ThetaX.png" class="gallery-item"><img src="ThetaX.png" alt=""></a> </li><li>ThetaY<br>  <a href="ThetaY.png" class="gallery-item"><img src="ThetaY.png" alt=""></a></li><li>ThetaZ<br>  <a href="ThetaZ.png" class="gallery-item"><img src="ThetaZ.png" alt=""></a></li></ul><h2 id="Positions"><a href="#Positions" class="headerlink" title="Positions"></a>Positions</h2><ul><li>PositionX<br>  <a href="PositionX.png" class="gallery-item"><img src="PositionX.png" alt=""></a></li><li>PositionY<br>  <a href="PositionY.png" class="gallery-item"><img src="PositionY.png" alt=""></a></li></ul><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>See previous post.</p><h1 id="Thought-Process"><a href="#Thought-Process" class="headerlink" title="Thought Process"></a>Thought Process</h1><p>If we take our stiffness matrix estimate, $\hat{K}$, and plug it back into our $\tau = K \theta$ equation, we will get a $\hat{\tau}$ as predicted by our model. We can then compare $\hat{\tau}$ to our measured $\tau$. We can then also calculate our torque estimate residuals.  </p><p>I had a lot of confusion about what exactly I should calculate for the residuals. Did I need to calculate estimates of the force, and then residuals for that, and the estimates of the deflection using the measured torque and the estimated K, and then plot them against everything? This would result in an intensely combinatorial data set.</p><p>Eventually I settled on, the torque is ultimately what we want to be able to estimate, as based.  We assume the deflections as measured by the IMU can give give us the torque. Assuming as well that we get an accurate reading of the force contact location, we can then derive the force applied ( $F = \tau /\ r$ ). Thus, we only need the residuals for the torque estimates for x, y (assuming torque z is always zero).</p><p>Additionally, I was sad to learn that the K bottom row estimate would always be zero. I was hoping that, since I had datapoints with nonzero $\theta$ x,y,z, then the least squares solution might find something interesting, e.g. $0 = -0.2x + 1.5y -.1z$.  However, it appears that our assumption that force is applied at $r_z = 0$ always, means that we cannot solve for anything meaningful for the K matrix.</p><h1 id="Interpretation"><a href="#Interpretation" class="headerlink" title="Interpretation"></a>Interpretation</h1><p>[TODO]  I think I need to take a day and come back to look at these graphs.</p><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><p>Actually interpret the graphs… and reduce the rmse.<br>(handtune a basis function to play around, then maybe NN to learn the correct basis function?)</p><h2 id="Project-Timeline-tracking"><a href="#Project-Timeline-tracking" class="headerlink" title="Project Timeline tracking"></a>Project Timeline tracking</h2><p>TODO</p><h2 id="Code-Reference"><a href="#Code-Reference" class="headerlink" title="Code Reference"></a>Code Reference</h2><pre class=" language-python"><code class="language-python">myX <span class="token operator">=</span> BigTheta<span class="token comment" spellcheck="true">#theta_1Dreshape(-1,1)</span>myy <span class="token operator">=</span> torq regr<span class="token operator">=</span> Ridge<span class="token punctuation">(</span>fit_intercept<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''fit_intercept : boolean    Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (e.g. data is expected to be already centered).'''</span>regr2 <span class="token operator">=</span> linear_model<span class="token punctuation">.</span>LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>regr<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>myX<span class="token punctuation">,</span> myy<span class="token punctuation">)</span>regr2<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>myX<span class="token punctuation">,</span> myy<span class="token punctuation">)</span>K <span class="token operator">=</span> regr<span class="token punctuation">.</span>coef_K2 <span class="token operator">=</span> regr2<span class="token punctuation">.</span>coef_ yPred<span class="token operator">=</span> regr<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>myX<span class="token punctuation">)</span> yPred2<span class="token operator">=</span> regr2<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>myX<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n======================'</span><span class="token punctuation">)</span>matK <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>lstsq<span class="token punctuation">(</span>BigTorque<span class="token punctuation">,</span> BigTheta<span class="token punctuation">,</span> rcond<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>matK<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Numpy linalg.lstsq() K coefficients:\n'</span><span class="token punctuation">,</span> matK<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'LinReg K Coefficients: \n'</span><span class="token punctuation">,</span> K2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Ridge K Coefficients: \n'</span><span class="token punctuation">,</span> K<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n======================'</span><span class="token punctuation">)</span>torq_est <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>K2<span class="token punctuation">,</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>T <span class="token comment" spellcheck="true">#n.3</span>resid <span class="token operator">=</span> torq <span class="token operator">-</span> yPredmse <span class="token operator">=</span> <span class="token punctuation">(</span>resid <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'resid shape'</span><span class="token punctuation">,</span> resid<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'RMSE Per Torque Dim'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>mse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print('Variance score (ideal 1): %.2f' % r2_score(thetaY))</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n=======  SkLearn Metrics===='</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n---- Using LinReg K dot theta. This has worse error as we have no intercept term. ==='</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Mean Absolute Error: %0.02f'</span>  <span class="token operator">%</span> metrics<span class="token punctuation">.</span>mean_absolute_error<span class="token punctuation">(</span>torq<span class="token punctuation">,</span> torq_est<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Mean Squared Error: %0.02f'</span>  <span class="token operator">%</span> metrics<span class="token punctuation">.</span>mean_squared_error<span class="token punctuation">(</span>torq<span class="token punctuation">,</span> torq_est<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Root Mean Squared Error %0.02f'</span> <span class="token operator">%</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>mean_squared_error<span class="token punctuation">(</span>torq<span class="token punctuation">,</span> torq_est<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n---- Using sklearn LinearRegression.pred(theta).   ========'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Mean Absolute Error: %0.02f:'</span> <span class="token operator">%</span> metrics<span class="token punctuation">.</span>mean_absolute_error<span class="token punctuation">(</span>torq<span class="token punctuation">,</span> yPred2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Mean Squared Error: %0.02f'</span> <span class="token operator">%</span> metrics<span class="token punctuation">.</span>mean_squared_error<span class="token punctuation">(</span>torq<span class="token punctuation">,</span> yPred2<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Root Mean Squared Error: %0.02f'</span> <span class="token operator">%</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>mean_squared_error<span class="token punctuation">(</span>torq<span class="token punctuation">,</span> yPred2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n---- Using sklearn Ridge.pred(theta).   ========'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Mean Absolute Error: %0.02f'</span> <span class="token operator">%</span> metrics<span class="token punctuation">.</span>mean_absolute_error<span class="token punctuation">(</span>torq<span class="token punctuation">,</span> yPred<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Mean Squared Error: %0.02f'</span> <span class="token operator">%</span> metrics<span class="token punctuation">.</span>mean_squared_error<span class="token punctuation">(</span>torq<span class="token punctuation">,</span> yPred<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Root Mean Squared Error: %0.02f'</span> <span class="token operator">%</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>mean_squared_error<span class="token punctuation">(</span>torq<span class="token punctuation">,</span> yPred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n --- LinRegr has the best fit ----'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nNote: torques about y axis: Min'</span><span class="token punctuation">,</span> myy<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'; Max'</span><span class="token punctuation">,</span> myy<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'grams * cm'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n======================'</span><span class="token punctuation">)</span></code></pre></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Math happens:  Stiffness matrix, residuals, and more</title>
      <link href="/howe299r_blog/2018/04/08/Stiffness-Matrix/"/>
      <url>/howe299r_blog/2018/04/08/Stiffness-Matrix/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p="">In this post I’ll write down some of the mathematical reasoning going into my plots.<p></p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>In grasp stability, we often use a friction cone model where if our forces are outside the friction cone, slip occurs and our grasp is consider unstable. In order to determine the friction cone, we need nine variables: the xyz of the contact force, contact location, and force normals (how much force is applied tangentially vs perpendicularly). </p><p>We have determined that the three pressure sensors on the finger by themselves are not sufficient in and of themselves to give us all nine datapoints – using data from them alone, we are not able to distinguish marginal cases, where given the same starting position of the grasper relative to the object, sometimes the object is grasped without slip and sometimes the object falls. </p><p>Therefore we would like to add more sensors in order to resolve these unknowns. We would like a force contact location sensor. Although there is a 6 axis force torque sensor, it costs multiple thousands of dollars and is finicky and fragile. Thus, we would like to see if we can estimate force and torque from an IMU instead.</p><h2 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h2><p>Based on the results from the previous analysis, we can say that the IMU seems fairly reasonably precise, with very small mean errors from the least-squares fit line.</p><p>(The error could come from both sensor noise and from a mismatch between our simplifed model and reality in terms of the bending of the finger).</p><p>Here we are making a few simplifying assumptions:</p><ol><li>There is a linear relationship between force and deflection, or alternatively torque and angle of deflection</li><li>The center of the axis of rotation was at the tip of the proximal joint<br>(in reality, likely it is two or three mm shifted outward, and changes as the flex increases)</li><li>We consider the z axis to be defined respect to the surface of the finger, so that z=0 is always at the tip of the finger</li></ol><h2 id="Setup-coordinates"><a href="#Setup-coordinates" class="headerlink" title="Setup (coordinates)"></a>Setup (coordinates)</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>      <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>. <span class="token punctuation">{</span>CL<span class="token punctuation">}</span>  <span class="token operator">||</span> --- <span class="token operator">||</span> 15  12  9  6  3 <span class="token operator">||</span> <span class="token punctuation">{</span>A<span class="token punctuation">}</span> <span class="token punctuation">[</span>xy<span class="token operator">=</span>0<span class="token punctuation">]</span>-- <span class="token operator">||</span> 14  11  8  5  2 <span class="token operator">||</span> <span class="token punctuation">{</span>MP<span class="token punctuation">}</span>  <span class="token operator">||</span> --- <span class="token operator">||</span> 13  10  7  4  1 <span class="token operator">||</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>      <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>.  <span class="token punctuation">[</span><span class="token punctuation">[</span>---<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">||</span>  WEB  <span class="token operator">||</span><span class="token operator">||</span>  CAM  <span class="token operator">||</span>  <span class="token operator">||</span>--- <span class="token operator">||</span></code></pre><p>Coordinates</p><pre class=" language-bash"><code class="language-bash">----<span class="token operator">></span> + x <span class="token punctuation">(</span>roll<span class="token punctuation">)</span><span class="token operator">|</span><span class="token operator">|</span><span class="token function">v</span>+ y <span class="token punctuation">(</span>pitch<span class="token punctuation">)</span>+ z <span class="token punctuation">(</span>up out of page<span class="token punctuation">)</span> <span class="token punctuation">(</span>yaw<span class="token punctuation">)</span></code></pre><p>Zeros defined as:</p><pre class=" language-bash"><code class="language-bash">x: tip of proximal jointy: center of proximal jointz: neutral axis</code></pre><p>Points 13 through 15 are at x=2.6 cm, and each x is spaced 5 mm apart.</p><pre class=" language-bash"><code class="language-bash">xs <span class="token operator">=</span> <span class="token punctuation">[</span>4.6, 4.1, 3.5, 3.1, 2.6<span class="token punctuation">]</span></code></pre><p>Because there is a mold line going down the center of the finger, thus our center points (positions 14 … 2)  are at y = 0.1cm. Note also that the other two y positions are not equidistant from y=0.</p><pre class=" language-bash"><code class="language-bash">ys <span class="token operator">=</span> <span class="token punctuation">[</span>0.4, 0.1, -0.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true">## ys = [0.4, 0, -0.2]   </span></code></pre><p>In terms of applicability to real life, we are also assuming that we can zero the sensors right before grasping the object and then hold it still for a second in order to obtain our reading and thereby deduce our parameters.</p><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><p>The previous round of data collection was at small deflections. After discovering that the stop at the end of the triple beam balance, I was able to roughly double the amount of force I could apply to the finger before hitting the end of the triple beam balance.</p><p>Max forces at each x position before triple beam bottoms out (note that off-axis measurements reduce the max force I can apply)</p><pre class=" language-bash"><code class="language-bash">140g160 to 180g200g240g300g</code></pre><p>I collected data in intervals of 20 grams, three times at each position.</p><h3 id="Post-Process-Data"><a href="#Post-Process-Data" class="headerlink" title="Post-Process Data"></a>Post-Process Data</h3><p>I took two data point for each force, one with no force applied as a “zero” calibration measurement to account for IMU instability over time, and one of the IMU sensor reading right after applying force (once the system stabilizes and the readings become constant).</p><p>Thus, to get the actual datapoints I subtracted the second reading from the first.</p><p>I did not use the x,y,z nor distance measurements from the IMU. I only used the rotation measurements for roll, pitch, and yaw.</p><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="1D-Case"><a href="#1D-Case" class="headerlink" title="1D Case"></a>1D Case</h3><p>In the one-axis case, the math is straightforward.</p><p>\begin{align}<br>\tau = k \times F<br>\end{align}</p><p>For example, one datapoint might be</p><p>\begin{align}<br>k &amp;= F / \tau \<br>k &amp;= (20g \times 9.8 m/s^2)\,/\,0.1 \text{ degrees}<br>\end{align}</p><p>where <code>k</code> represents the stiffness of the finger. Let <code>c</code> represent the inverse of <code>k</code>.</p><p>Using least squares error, we may fit a line to find $\hat{c}$. </p><p>\begin{align}<br> \hat{c} &amp;= \frac{1}{\hat{k}} \<br> \theta &amp;= \tau \hat{c} + b<br>\end{align}</p><p>where <code>b</code> be a constant determined by the line of fit.</p><h3 id="Residuals"><a href="#Residuals" class="headerlink" title="Residuals"></a>Residuals</h3><p>From the above, we may calculate the residuals of any of our estimated variables.<br>For instance, from our actual data we may obtain an estimate for <code>k</code>.</p><p>\begin{align}<br> \tau_{data} &amp;= \hat{k} \cdot \theta_{data} \<br>\end{align}</p><p>Using this k we can go back and calculate estimates for the “true” torque, assuming our linear model was correct.</p><p>\begin{align}<br> \hat{\tau} &amp;= \hat{k} \cdot \theta_{data}<br>\end{align}</p><p>We would then calculate our torque residuals as</p><p>\begin{align}<br> \epsilon_{\tau} = \hat{\tau} - \tau<br>\end{align}</p><p>If we plot a graph of (torque residuals) vs (estimate residuals) and find that our points are randomly scattered around a straight line, then our model well-approximates reality as sensed by a noisy sensor.</p><p>However, our residuals may instead follow a parabola, in which case we would want to amend our model to have higher order terms.</p><p>\begin{align}<br> \hat{\tau} = \hat{k}\theta_{data} +c_1 \theta_{data} + c_2 \theta_{data}<br>\end{align}</p><p>and so forth. </p><p>We may eventually use machine learning techniques such as logistic regression with basis functions in order to fit such higher order terms, if needed. Or perhaps we will not need to.</p><h3 id="3D-case"><a href="#3D-case" class="headerlink" title="3D case"></a>3D case</h3><p>The 3d case is exactly the same, except now each of the variables are vectors / matrices. </p><p>\begin{align}<br>[ \vec{\tau} \ ]<em>{3xn}  = [ k ]</em>{3x3} \cdot [ \vec{\theta} ]_{3xn}<br>\end{align}</p><p>where</p><p>\begin{align}<br>\tau &amp;= [ \stackrel{3x1}{\tau_1} | \stackrel{3x1}{\tau_2} | … |\stackrel{3x1}{\tau_n} ] \<br>\<br>\theta &amp;= [ \stackrel{3x1}{\theta_1} | \stackrel{3x1}{\theta_2} | … |\stackrel{3x1}{\theta_n} ]<br>\end{align}</p><h2 id="First-Round-of-Data"><a href="#First-Round-of-Data" class="headerlink" title="First Round of Data"></a>First Round of Data</h2><p>I analyzed the y components (yaw components) only, with a single repeat per force application per<br>position, for all 3 or 4 positions I collected. See plot below.</p><h3 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h3><p><a href="torq_vs_pitch.png" title="torque vs deflection" class="gallery-item"><img src="torq_vs_pitch.png" alt="torque vs deflection"></a></p><pre class=" language-bash"><code class="language-bash">Coefficients:  <span class="token punctuation">[</span>-0.00678065<span class="token punctuation">]</span>Intercept:  <span class="token punctuation">[</span>0.7679924242424274<span class="token punctuation">]</span>Mean squared error: 0.29</code></pre><p>From this graph we get that<br>\begin{align}<br> \hat{c} &amp;= -0.00678065<br>\end{align}</p><p>We see that the IMU appears to create a very accurate linear line, as the average squared deviation is on the order of a tenth of a degree. </p><h3 id="2D-Sanity-Check"><a href="#2D-Sanity-Check" class="headerlink" title="2D Sanity Check"></a>2D Sanity Check</h3><p>We can run “forward” and “backward” calculations as a sanity check. We have $\hat {k} = \frac{1}{0.00678065} =  147.5$ from our above least squares line. We can also plug in an individual datapoint, for instance (100 gram cm, 2.85 deg, at position 2 i.e. with no off-axis torque terms), and see that 4.6cm * 100g = 460 g cm. Dividing by 2.85 deg, we get approximately 150 g cm / deg, which matches $\hat{k}.</p><p>( Note: I have no idea if this is a reasonable stiffness (well, 1/stiffness) estimate in terms of absolute real-life estimates. )</p><h3 id="3D-Sanity-Check-Simplify-to-2D-case"><a href="#3D-Sanity-Check-Simplify-to-2D-case" class="headerlink" title="3D Sanity Check: Simplify to 2D case"></a>3D Sanity Check: Simplify to 2D case</h3><p>We know that $\tau = r \times F$<br>\begin{align}<br>\begin{bmatrix}<br>    \tau_{x}       \<br>    \tau_{y}       \<br>    \tau_{z}       \<br>\end{bmatrix} =<br>\Bigg[ \; K \; \Bigg]<em>{3x3}  \;<br>\begin{bmatrix}<br>    \theta</em>{x}       \<br>    \theta_{y}       \<br>    \theta_{z}       \<br>\end{bmatrix} \<br>\end{align}</p><p>Further, we can use some of the simplifying assumptions we made about to model our system, in order to have an idea of what values our math should result in for $k$.</p><p>We may also see that we will only ever have x and y components for $r$; z components for $F$; and thereforce (by how cross products work) only ever have x and y components for $\tau$.</p><p><strong>Off-axis</strong><br>\begin{align}<br>r \approx<br>\begin{bmatrix}<br>    r_x       \<br>    r_y       \<br>    0       \<br>\end{bmatrix} \; \times \;<br>f \approx<br>\begin{bmatrix}<br>    0       \<br>    0       \<br>    f_z      \<br>\end{bmatrix} \; =  \; \tau \; =<br>\begin{bmatrix}<br>    \tau_x       \<br>    \tau_y       \<br>    0      \<br>\end{bmatrix}\<br>\end{align}</p><p><strong>On-Axis</strong><br>In the even more simplified case, if we do not apply the force off-axis and there is only a pitch<br>deflection</p><p>\begin{align}<br>r \approx<br>\begin{bmatrix}<br>    r_x       \<br>    0       \<br>    0       \<br>\end{bmatrix} \; \times \;<br>f \approx<br>\begin{bmatrix}<br>    0       \<br>    0       \<br>    f_z      \<br>\end{bmatrix} \; =  \; \tau \; =<br>\begin{bmatrix}<br>    0 \<br>    \tau_y       \<br>    0      \<br>\end{bmatrix}\<br>\end{align}</p><p>We <strong>will</strong> have enough nonzero values for the xyz components of $\theta$ that we will be able to calculate a nondegenerate estimate for $k$. This is thanks to applying the force off-axis, causing the finger to roll and create non-zero elements for $\theta_y$ ( our roll) and $\theta_z$ (our yaw).</p><h3 id="3D-Sanity-Case-Pick-datapoints-with-approx-0-values"><a href="#3D-Sanity-Case-Pick-datapoints-with-approx-0-values" class="headerlink" title="3D Sanity Case: Pick datapoints with $\approx 0$ values"></a>3D Sanity Case: Pick datapoints with $\approx 0$ values</h3><p>We can selectively pick datapoints which have tiny values in some components and check that the resulting $\hat{K}$ matrix is as we expect.</p><h3 id="Further-Sanity-Checks"><a href="#Further-Sanity-Checks" class="headerlink" title="Further Sanity Checks"></a>Further Sanity Checks</h3><p>We can also make sure that for off-axis forces on either side of the finger, one should be positive and one negative, and they should be roughly the same order magnitude. </p><p>Note that, because pos 1 is +4mm but  pos 3 is only -2mm, thus $ | \theta_{pos3} |$ should be less than $ | \theta_{pos1} | $.</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul><li><p>I somewhat tried to stick to the convention of “uppercase” letters for matrices, lowercase for constants and vectors, hats for estimates, and vector signs for well, vectors.<br>But not really, because I got lazy.</p></li><li><p>There was a brief explanation of how, if the residuals are plotted against the actual data, then we would expect a slight upward linear trend in the resulting datapoints. TODO: look into the statistics behind this. What we actually want is the residuals plotted against our estimates. That is, if we are looking at the torque residuals,<br>\begin{align}<br>  \vec{\epsilon}<em>\tau = \vec{\tau}</em>{\text{calculated}} - \hat{\vec{\tau}}_{\text{estimated from } k\theta}<br>\end{align}<br>We want to plot </p><ul><li>$\epsilon_\tau$ vs. $\tau_{\text{estimated from }k\theta}$ and NOT </li><li><p>$\epsilon_\tau$ vs. $\tau_{\text{calculated}}$</p></li><li><p>Note: $\tau_{\text{calculated}}$ is taken directly from the xyz position and the force we applied to get our datapoint.<br>\begin{align}<br>\vec{\tau}<em>{\text{calculated}} = \vec{r}</em>{data} \times \vec{F}_{data}<br>\end{align}</p></li><li>Note: Then from fitting a line vs the deflections (that we also physically measured) we then derived a $\hat{K}$.  We then take this $\hat{K}$ and multiply against the deflections $\theta_{data}$ to work out our $\hat{\tau}_{\text{estimated from }k\theta}$ </li></ul></li></ul><h2 id="the-end"><a href="#the-end" class="headerlink" title="the end."></a>the end.</h2></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Data Analysis  [TODO]</title>
      <link href="/howe299r_blog/2018/04/08/Data-Analysis/"/>
      <url>/howe299r_blog/2018/04/08/Data-Analysis/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p="">Plotly<br>Spider<p></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Automating the Experimental Setup</title>
      <link href="/howe299r_blog/2018/04/08/Automated-Experimental-Setup/"/>
      <url>/howe299r_blog/2018/04/08/Automated-Experimental-Setup/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p="">Experimental Setup, in terms of computer<br><a href="experimentalsetup03April2018.jpg" title="Experimental Setup, in terms of computer" class="gallery-item"><img src="experimentalsetup03April2018.jpg" alt="Experimental Setup, in terms of computer"></a><p></p><p>This covers the parts of the data collection system that I integrated and automated.<br>Specifically</p><ul><li>Modified c code to spit out roll, pitch, yaw; continuously in CSV format over serial</li><li>Modified openCV code to <ul><li>continuously: spit out roll, pitch, yaw to terminal (stdout) </li><li>on keypress: write out roll, pitch, yaw in CSV format into a file</li><li>on keypress: save image to file </li></ul></li><li>Created python code to read in c CSV data over serial<ul><li>continuously: spit out roll, pitch, yaw to terminal (stdout) </li><li>on keypress: write data to file</li></ul></li></ul><p>I set the zero coordinates to be roughly the neutral axis on z, and centered<br>width wise on the finger, and at rougly where the clamp is (at the top edge<br>of the proximal joint).  </p><p>I identified, using a ruler, the x,y distances for each point.<br>Note: originally, was supposed to be grid of 0.5cm spaced points.<br>However, I found that</p><ul><li>I could not place picker on center, since there was a mold parting line</li><li>I could not place picker 5 mm from center, and had to move it in </li><li>I also accidentally used the wrong line of points, so it is +4 mm on one side of the center<br>line, and -2 cm on the other side.</li></ul><h2 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h2><p>On the c side, I didn’t really modify much. Adafruit had a “unified sensor library” plugin for the BNO055 9axis IMU I used (which has an onboard ARM to do the proprietary sensor fusion stuff).</p><p>At first I did tinker around, because I thought I wanted position (xyz cm) and<br>not orientation (roll pitch yaw degrees). It’s a bit more annoying to get the<br>raw accel data out, the orientation data is what BNO055 has a magic calibration<br>for. The accel data is what’s called “raw sensor API” data. I think you call<br><code>bno.getVector</code> instead of <code>bno.getEvent</code>.</p><pre class=" language-c"><code class="language-c">    imu<span class="token punctuation">:</span><span class="token punctuation">:</span>Vector<span class="token operator">&lt;</span><span class="token number">3</span><span class="token operator">></span> grav <span class="token operator">=</span> bno<span class="token punctuation">.</span><span class="token function">getVector</span><span class="token punctuation">(</span>Adafruit_BNO055<span class="token punctuation">:</span><span class="token punctuation">:</span>VECTOR_GRAVITY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// !!!!</span>    <span class="token comment" spellcheck="true">//imu::Vector&lt;3> linaccel = bno.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL); // !!!!</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>grav<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Reading"><a href="#Reading" class="headerlink" title="Reading"></a>Reading</h3><p>2014 accelerometer calibration paper was pretty cool [2]. It talked about how, by putting the IMU in various orientation, you could use the fact that there’s a constant gravity term to calibrate the IMU. I ended up not needing this because I used the BNO055 which runs calibrates for you / adafruit documents how to do this.<br>[2] “A robust and easy to implement method for IMU calibration without external equipments” ICRA 2014</p><p>(TODO: Also, I have no idea how the magnetometer calibrates by “waving it in a figure 8”, I’d like to learn sometime.)</p><h3 id="EEPROM-Calibration-data"><a href="#EEPROM-Calibration-data" class="headerlink" title="EEPROM Calibration data"></a>EEPROM Calibration data</h3><p>Oh, and to save on setup time, I run <code>restore_offsets.ino</code> first . The BNO055 has a bit of EEPROM.</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// as written by adafruit library</span>    EEPROM<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>eeAddress<span class="token punctuation">,</span> bnoID<span class="token punctuation">)</span><span class="token punctuation">;</span>    eeAddress <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EEPROM<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>eeAddress<span class="token punctuation">,</span> newCalib<span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Data stored to EEPROM."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>This data is read into <code>sensorapi_bno055.ino</code>, after which, when I ran the file only the magnetometer is not calibrated. Just lightly disturbing the finger was enough to bring M calibration from “1” to “3” and calibrate the whole system.</p><p>DEBUG TIP: I had to change my whole experimental setup, because the acceleromter refused to calibrate when the finger didn’t start out roughly parallel to the ground. Not sure why.</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// as written by adafruit library</span>    <span class="token keyword">int</span> eeAddress <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> bnoID<span class="token punctuation">;</span>    EEPROM<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eeAddress<span class="token punctuation">,</span> bnoID<span class="token punctuation">)</span><span class="token punctuation">;</span>    adafruit_bno055_offsets_t calibrationData<span class="token punctuation">;</span>    sensor_t sensor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*  Look for the sensor's unique ID at the beginning oF EEPROM. This isn't foolproof, but it's better than nothing.  */</span>    bno<span class="token punctuation">.</span><span class="token function">getSensor</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sensor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bnoID <span class="token operator">!=</span> sensor<span class="token punctuation">.</span>sensor_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nNo Calibration Data for this sensor exists in EEPROM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nFound Calibration for this sensor in EEPROM."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        eeAddress <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EEPROM<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eeAddress<span class="token punctuation">,</span> calibrationData<span class="token punctuation">)</span><span class="token punctuation">;</span>        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n\nRestoring Calibration data to the BNO055..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bno<span class="token punctuation">.</span><span class="token function">setSensorOffsets</span><span class="token punctuation">(</span>calibrationData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Experimental-setup"><a href="#Experimental-setup" class="headerlink" title="Experimental setup"></a>Experimental setup</h3><p>For reference, the data output format looks like this:</p><p><strong>Data Format</strong></p><pre class=" language-c"><code class="language-c">  <span class="token function">displayCalStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"XYZ; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>orientation<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>orientation<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>orientation<span class="token punctuation">.</span>z<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The calibration status is unique to the BNO sensor, it tells you from 0 to 3<br>how calibrated each of the mag / gryo / accel is, and gives a score for the<br>overall system as well. </p><p>Funny story: initially my setup used a magnet to hold the pumpkin poking tool<br>on to the triple beam balance (one hotglued to tool, one above the plate). I<br>spent a while scratching my head about how the magnetometer refused to<br>calibrate when I actually went to collect data, then realized I had this super<br>strong magnet inches from the IMU… whoops. (I modified it to just use a lot<br>of hot glue instead, which was REALLY ANNOYING. The triple beam balance plate<br>is pretty slick. I ended up roughing up the surface a tiny bit with sandpaper).</p><p><strong>Calibration Format</strong></p><pre class=" language-c"><code class="language-c">def <span class="token function">displayCalStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    bno<span class="token punctuation">.</span><span class="token function">getCalibration</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>system<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gyro<span class="token punctuation">,</span> <span class="token operator">&amp;</span>accel<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mag<span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Sys:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>system<span class="token punctuation">,</span> DEC<span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" G:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>gyro<span class="token punctuation">,</span> DEC<span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" A:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>accel<span class="token punctuation">,</span> DEC<span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" M:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>mag<span class="token punctuation">,</span> DEC<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>I actually have no idea how my code works. But it does! I was struggling to<br>have the python file both continuously output the serial input to a terminal,<br>while also being able to catch a keystroke on occasion that would write one<br>datapoint (one line) to a file. I ended up needing to use tkinter to spawn a<br>window to catch the keystroke. The “tkinter app” lived inside a thread, I<br>guess, which ran asynchronously, allowing the program to proceed to the loop<br>where it continuously read in data and spat it out.</p><p>As per <code>IMU_to_file.py</code>, the libraries needed:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 03 April 2018 </span><span class="token comment" spellcheck="true"># Reads in (c) serial port line by line, printing out on terminal. </span><span class="token comment" spellcheck="true"># Also opens tkinter window. Pressing any key in there writes the next serial line to a file</span><span class="token comment" spellcheck="true"># In the terminal, Ctrl-C twice will exit the program. </span><span class="token keyword">import</span> os<span class="token keyword">import</span> serial<span class="token keyword">import</span> time<span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">import</span> threading<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime</code></pre><p><strong>The major stuff requires simply looking at the full file.</strong></p><p>(TODO: put link to full source code, on github, both in main “research” repo and also on the deployed blog directory)</p><h3 id="Python-code-Small-tidbits"><a href="#Python-code-Small-tidbits" class="headerlink" title="Python code, Small tidbits"></a>Python code, Small tidbits</h3><p>The relevant “basics” stuff I re-learned:</p><p><strong>Get human-readable time as a string</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimestrtime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span></code></pre><p><strong>Write to file</strong></p><pre class=" language-python"><code class="language-python">fmode <span class="token operator">=</span> <span class="token string">'ab'</span>outf <span class="token operator">=</span> open<span class="token punctuation">(</span>fname<span class="token punctuation">,</span>fmode<span class="token punctuation">)</span>            outf<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            outf<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Also came across a neat way to avoid having to modify the file all the time, because when I power cycle the c, it’ll occasionally change the port it’s connected  [1].</p><p><strong>Serial port changes</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'/dev/ttyACM0'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    addr <span class="token operator">=</span>  <span class="token string">' dev/ttyACM0'</span><span class="token keyword">else</span><span class="token punctuation">:</span></code></pre><p><strong>Read from serial port</strong></p><pre class=" language-python"><code class="language-python">port <span class="token operator">=</span> serial<span class="token punctuation">.</span>Serial<span class="token punctuation">(</span>addr<span class="token punctuation">,</span>baud<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> port<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><p><em>[1] By the way, why can’t the Arduino with its fancy GUI do something similar?<br>where it knows the OS and the likely ports, and if the port doesn’t exist<br>anymore, it’ll automatically change to the next most likely. There could be a<br>prompt asking the user if it’s the correct port even</em></p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>On the C++ side, the main things I learned were how to write out to a file (in append mode), as well as how to get the current time (in order to timestamp when I first opened the file).</p><h2 id="C-Development-Process-for-Modifying-AprilTag-Demo"><a href="#C-Development-Process-for-Modifying-AprilTag-Demo" class="headerlink" title="C++ Development Process for Modifying AprilTag Demo"></a>C++ Development Process for Modifying AprilTag Demo</h2><h3 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h3><p>I wanted to get the apriltag demo to output data that would be amenable to analysis later.<br>I stripped out the “ID” and “Hamming” in the print statements.</p><p>As per <code>apriltags_demo.cpp</code>:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* 03 April 2018 * Edited by nrw * Additions: Press any key to simultaneously write data to file and capture image to file * Maintains stream of data to terminal * Ctrl-C must now be used to exit program */</span></code></pre><h3 id="Quickstart-version-1"><a href="#Quickstart-version-1" class="headerlink" title="Quickstart version 1"></a>Quickstart version 1</h3><ul><li><p>edit file</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/Documents/howe299r/apriltags <span class="token function">vi</span> example/apriltags_demo.cpp</code></pre></li><li><p>Compile<br><code>bashcd ~/Documents/howe299r/apriltagsmake</code>bash</p></li><li><p>Run file </p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/Documents/howe299r/apriltags/build/bin ./apriltags_demo</code></pre></li></ul><h3 id="Quickstart-version-2"><a href="#Quickstart-version-2" class="headerlink" title="Quickstart version 2"></a>Quickstart version 2</h3><ul><li>In fact, I abstracted this into a file called <code>run.sh</code>, thus the simplified dev cycle:<pre class=" language-bash"><code class="language-bash">$ j example$ <span class="token function">vi</span> apriltags_demo.cpp <span class="token punctuation">(</span>make edits and save<span class="token punctuation">)</span>$ ./run.sh</code></pre></li></ul><p>Where I had as contents of run.sh:</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>APRIL_DIR<span class="token operator">=</span><span class="token string">"/home/nrw/Documents/howe299r/apriltags"</span><span class="token function">cd</span> <span class="token variable">$APRIL_DIR</span><span class="token comment" spellcheck="true">#make clean</span><span class="token function">make</span><span class="token function">cd</span> <span class="token variable">$APRIL_DIR</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">pwd</span><span class="token variable">)</span></span><span class="token function">cd</span> build/bin/./apriltags_demo</code></pre><h3 id="Experiment-Specific-settings"><a href="#Experiment-Specific-settings" class="headerlink" title="Experiment Specific settings"></a>Experiment Specific settings</h3><p>From the openCV camera calibration I had these settings</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token function">m_width</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">m_height</span><span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">m_tagSize</span><span class="token punctuation">(</span><span class="token number">0.00944</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">m_fx</span><span class="token punctuation">(</span><span class="token number">667</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// in pixels</span>    <span class="token function">m_fy</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//</span>    <span class="token function">m_px</span><span class="token punctuation">(</span><span class="token number">344</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// principal point</span>    <span class="token function">m_py</span><span class="token punctuation">(</span><span class="token number">227</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h3 id="C-code-Relevant-sections-modified-in"><a href="#C-code-Relevant-sections-modified-in" class="headerlink" title="C++ code: Relevant sections modified in"></a>C++ code: Relevant sections modified in</h3><p>In <code>apriltags_demo.cpp</code></p><p>First we need some new libraries and constants</p><p><strong>Libraries</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span> </span><span class="token comment" spellcheck="true">//remove newline</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>std<span class="token operator">::</span>string fname <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span></code></pre><p><strong>Create filename</strong></p><pre class=" language-cpp"><code class="language-cpp">    time_t now <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> dt <span class="token operator">=</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// get human readable current time</span>    <span class="token operator">*</span>std<span class="token operator">::</span><span class="token function">remove</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> dt<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//remove newline</span>    fname <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>    fname <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"_openCV.txt"</span><span class="token punctuation">;</span></code></pre><p><strong>Now we write to terminal, and also write out data to a file on keypress in the OpenCV window</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print_detection</span><span class="token punctuation">(</span>AprilTags<span class="token operator">::</span>TagDetection<span class="token operator">&amp;</span> detection<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>     <span class="token keyword">const</span> <span class="token keyword">int</span> TIMESTEP <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    time_t now <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> dt <span class="token operator">=</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// get human readable current time</span>    <span class="token operator">*</span>std<span class="token operator">::</span><span class="token function">remove</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> dt<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//remove newline</span><span class="token comment" spellcheck="true">// print data to terminal, aka cout:</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">" ["</span> <span class="token operator">&lt;&lt;</span> dt <span class="token operator">&lt;&lt;</span> <span class="token string">"] distance,x,y,z,yaw,pitch,roll; "</span>         <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> translation<span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">"; "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">translation</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">"; "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">translation</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">"; "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">translation</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>         <span class="token operator">&lt;&lt;</span> <span class="token string">"; "</span> <span class="token operator">&lt;&lt;</span> yaw         <span class="token operator">&lt;&lt;</span> <span class="token string">"; "</span> <span class="token operator">&lt;&lt;</span> pitch         <span class="token operator">&lt;&lt;</span> <span class="token string">"; "</span> <span class="token operator">&lt;&lt;</span> roll <span class="token operator">&lt;&lt;</span> <span class="token string">";\n"</span>         <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//nrw</span><span class="token comment" spellcheck="true">// ... do stuff </span><span class="token comment" spellcheck="true">// write data to file, using ofstream. fname has a timestamp of when we started collecting data</span><span class="token comment" spellcheck="true">// while each line (datapoint) has a timestamp as well</span><span class="token comment" spellcheck="true">// waitKey(1) waits 1 (millisecond, I think)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cv<span class="token operator">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"wrote to file \n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//nrw</span>        ofstream myfile<span class="token punctuation">;</span>        myfile<span class="token punctuation">.</span><span class="token function">open</span> <span class="token punctuation">(</span>fname<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>ios_base<span class="token operator">::</span>app <span class="token operator">|</span> std<span class="token operator">::</span>ios_base<span class="token operator">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//open in append mode</span>        myfile <span class="token operator">&lt;&lt;</span>  <span class="token string">" ["</span> <span class="token operator">&lt;&lt;</span> dt <span class="token operator">&lt;&lt;</span> <span class="token string">"] distance,x,y,z,yaw,pitch,roll; "</span>  <span class="token comment" spellcheck="true">//nrw</span>        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//send signal to write image as well</span></code></pre><p>Also I wanted the image at the timepoint, for trouble-shooting purposes<br>Here’s the relevant tidbits about using openCV’s library to call imwrite and write the image to a file:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// ... run processImage(), which runs print_detection() if a tag is detected ... </span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          cout <span class="token operator">&lt;&lt;</span> <span class="token string">"wrote to file \n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//nrw</span>          time_t now <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">char</span><span class="token operator">*</span> dt <span class="token operator">=</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// get human readable current time</span>          <span class="token operator">*</span>std<span class="token operator">::</span><span class="token function">remove</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> dt<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//remove newline</span>          std<span class="token operator">::</span>string imageout <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>          imageout <span class="token operator">+</span><span class="token operator">=</span><span class="token string">"_images.jpg"</span><span class="token punctuation">;</span>          <span class="token function">imwrite</span><span class="token punctuation">(</span>imageout<span class="token punctuation">,</span> image <span class="token punctuation">)</span><span class="token punctuation">;</span>          flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Experiment-Setup"><a href="#Experiment-Setup" class="headerlink" title="Experiment Setup"></a>Experiment Setup</h2><p>Finally, I used <code>watch</code> and <code>head</code> in order to manually inspect the files in real time, and make sure that I was keeping the IMU and OpenCV data consistent, i.e. not accidentally taking two datapoints. </p><h3 id="The-Whole-setup"><a href="#The-Whole-setup" class="headerlink" title="The Whole setup"></a>The Whole setup</h3><p>Open an openCV window, and a TKinter window. Clicking into either window, and hitting a key, will cause data to be recorded.</p><pre class=" language-bash"><code class="language-bash">nrw@earlgrey: howe299r/apriltags/build/bin$ ./apriltags_demonrw@earlgrey: howe299r/python$ python IMU_to_file.py </code></pre><p>To have a sanity check, we want to peek into the files in real time. Let’s look at the number of lines in the file using <code>wc</code> as well as display the last few lines in the file using <code>tail</code>. </p><pre class=" language-bash"><code class="language-bash">nrw@earlgrey: howe299r/apriltags/build/bin$ <span class="token function">watch</span> -n 0.2 <span class="token function">tail</span> <span class="token string">"*_openCV.txt"</span>nrw@earlgrey: howe299r/apriltags/build/bin$ <span class="token function">watch</span> -n 0.2 <span class="token function">wc</span> <span class="token string">"*_openCV.txt"</span>nrw@earlgrey: howe299r/python$ <span class="token function">watch</span> -n 0.2 <span class="token function">tail</span> <span class="token string">"*_accel_data.txt"</span> nrw@earlgrey: howe299r/python$ <span class="token function">watch</span> -n 0.2 <span class="token function">wc</span> <span class="token string">"*_accel_data.txt"</span> ** $ <span class="token function">watch</span> -n 0.2 <span class="token function">tail</span> tailtest.txt</code></pre><p>And finally I had file manager window open to check if the images were being<br>written correctly, and also allow me to manually intervene in the txt files as needed.</p><p>Make sure to click on the image below and maximize your window, if you want to be<br>able to see the text and what is going on:</p><p>Experimental Setup, in terms of computer<br><a href="experimentalsetup03April2018.jpg" title="Experimental Setup, in terms of computer" class="gallery-item"><img src="experimentalsetup03April2018.jpg" alt="Experimental Setup, in terms of computer"></a></p><h3 id="Code-Robustness"><a href="#Code-Robustness" class="headerlink" title="Code Robustness"></a>Code Robustness</h3><p>I also wanted to be able to recover when I made an oopsie in the data collection (e.g. leaving the weights on when I went to take a “zero” reading.</p><p>This was significantly easier now that all data was timestamped.</p><ul><li>For the images – I simply used a GUI file manager to delete them.</li><li>For the openCV data– I simply used a GUI editor to delete the lines.</li><li>For the IMU data – my python program would refuse to write to the file anymore if I edited the file. </li></ul><p>I worked around the fragile python file by… using a weird commmand to write to the file without “overwriting” the file. This tidbit thanks to stackoverflow (lost the link)</p><pre class=" language-bash"><code class="language-bash">$ n<span class="token operator">=</span>4$ tac tmp.txt <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"1,<span class="token variable">$n</span>{d}"</span> <span class="token operator">|</span> tac <span class="token operator">></span> out.txt<span class="token punctuation">;</span> <span class="token function">cat</span> out.txt <span class="token operator">></span> tmp.txt </code></pre><p>I tried similar commands that used “&gt; tmp.txt; mv out.txt &gt; tmp.txt”<br>but i guess “cat” was the trick or something.</p><p>ShadowRanger had this to say about why:</p><pre><code>@orangenarwhals: Your command line there is never changing the inode associated with the file name (&gt; somefile truncates an existing somefile then writes new data, it doesn&#39;t delete said file, then create a new one). Most editors use a crash safe form of editing, where a new file is written completely, then an atomic rename operation is issued which renames the new file to the old file name (implicitly deleting the old file). But this means the inode number changes after each save operation, which means open file handles from other programs are invalidated). The advantage to the &quot;write new file, rename to replace old file&quot; is that if you lose power (or blue screen, or the program just crashes) at any point prior to the rename, your original file data is intact. In no circumstance does the final file hold anything but the complete old data or the complete new data. If your computer crashed during cat out.txt &gt; tmp.txt step or you killed it midway through processing, tmp.txt might contain partially written garbage, or nothing at all, and it might not be possible to tell if out.txt or tmp.txt was the &quot;correct&quot; data.– ShadowRanger Apr 4 at 1:59 </code></pre><p>Anyway,<br>According to stackoverflow, I was just being very dumb after being confused by threads and such. I didn’t get to test this answer, but seems reasonable.<br><a href="https://stackoverflow.com/questions/49626230/python-cannot-write-to-file-after-saved-in-another-editor/49626374" target="_blank" rel="noopener">https://stackoverflow.com/questions/49626230/python-cannot-write-to-file-after-saved-in-another-editor/49626374</a></p><pre class=" language-python"><code class="language-python"><span class="token operator">//</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'tmp.txt'</span><span class="token punctuation">,</span> <span class="token string">'ab'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f <span class="token punctuation">:</span> <span class="token operator">//</span> move this inside <span class="token keyword">for</span> loop to fix<span class="token punctuation">,</span> <span class="token keyword">while</span> <span class="token boolean">True</span> <span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'tmp.txt'</span><span class="token punctuation">,</span> <span class="token string">'ab'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f <span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'this is a test\n'</span><span class="token punctuation">)</span> <span class="token operator">//</span>just keep opening the file<span class="token punctuation">,</span> i guess nothing bad happens?        f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Physical Experiment Setup<br><a href="02Apr_setup3.jpg" title="Physical Experiment Setup" class="gallery-item"><img src="02Apr_setup3.jpg" alt="Physical Experiment Setup"></a></p><h1 id="TODO-this-is-a-temporary-placeholder"><a href="#TODO-this-is-a-temporary-placeholder" class="headerlink" title="TODO: this is a temporary placeholder"></a>TODO: this is a temporary placeholder</h1><p>move these files to their own post, eventually…</p><p><a href="02Apr_setup2.jpg" title="width (y) of finger" class="gallery-item"><img src="02Apr_setup2.jpg" alt="width (y) of finger"></a><br><a href="02Apr_setup1.jpg" title="length (x) of finger" class="gallery-item"><img src="02Apr_setup1.jpg" alt="length (x) of finger"></a><br><a href="torque_calc.jpg" title="x,y,z coordinates, also using a phone to directly write metadata into image" class="gallery-item"><img src="torque_calc.jpg" alt="x,y,z coordinates, also using a phone to directly write metadata into image"></a><br><a href="scale_1g.jpg" title="verification of force transmitted, using a scale" class="gallery-item"><img src="scale_1g.jpg" alt="verification of force transmitted, using a scale"></a><br><a href="IMU_finger.jpg" title="High tech attachment method of IMU to finger" class="gallery-item"><img src="IMU_finger.jpg" alt="High tech attachment method of IMU to finger"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
    </entry>
    
    <entry>
      <title>April Tags (Getting Started)</title>
      <link href="/howe299r_blog/2018/04/08/AprilTags/"/>
      <url>/howe299r_blog/2018/04/08/AprilTags/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p="">I recently started working with April tags, since they seem cool &amp; you see them<br>all over the place <p></p><ol><li><p>used as fiducials for robots trying to walk around a somewhat unstructured environment).<br><a href="boston_dynamics_atlas_apriltags.png" title="Boston Dynamics, Atlas robot, picking up a box with an apriltag" class="gallery-item"><img src="boston_dynamics_atlas_apriltags.png" alt="Boston Dynamics, Atlas robot, picking up a box with an apriltag"></a><br>Source: “Atlas, The Next Generation”, BostonDynamics, <a href="https://youtu.be/rVlhMGQgDkY?t=1m24s" target="_blank" rel="noopener">https://youtu.be/rVlhMGQgDkY?t=1m24s</a><br>hgt</p></li><li><p>Ant Tracking<br><a href="ants.png" title="Ant tracking with AprilTags" class="gallery-item"><img src="ants.png" alt="Ant tracking with AprilTags"></a><br>Source: “AprilTag 2: Efficient and robust fiducial detection”, <a href="https://april.eecs.umich.edu/media/pdfs/wang2016iros.pdf" target="_blank" rel="noopener">https://april.eecs.umich.edu/media/pdfs/wang2016iros.pdf</a></p></li></ol><h2 id="the-internet-fell-short-optional-section"><a href="#the-internet-fell-short-optional-section" class="headerlink" title="the internet fell short (optional section)"></a>the internet fell short (optional section)</h2><p>It was surprisingly hard to find instructions to get started, my search-fu was failing me. My search results turned up the original “official” website from the April Robotics Laboratory at University of Michigan, <a href="https://april.eecs.umich.edu/software/apriltag.html" target="_blank" rel="noopener">https://april.eecs.umich.edu/software/apriltag.html</a></p><p>This official site had no “getting started” instructions on it, and same for the C++ wrapper by a researcher at CSAIL (now a professor who I met at CMU!) <a href="https://people.csail.mit.edu/kaess/apriltags" target="_blank" rel="noopener">https://people.csail.mit.edu/kaess/apriltags</a></p><p>And same for the ROS wrapper around the Apriltags, which also confusingly seems to have several version that may or may not now be the same. <a href="http://wiki.ros.org/apriltags_ros" target="_blank" rel="noopener">http://wiki.ros.org/apriltags_ros</a> and <a href="https://github.com/xenobot-dev/apriltags_ros" target="_blank" rel="noopener">https://github.com/xenobot-dev/apriltags_ros</a></p><p>(edit: oh wait neat, there are instructions at <a href="https://cmumrsdproject.wikispaces.com/AprilTags_ROS)" target="_blank" rel="noopener">https://cmumrsdproject.wikispaces.com/AprilTags_ROS)</a>. However, I’m still not terribly familiar with ROS, so I wasn’t too enthused about using this wrapper.</p><p>Fortunately Patrick over at Kuindersma’s lab above me was able to get me started.</p><ul><li>Download and install C++ wrapper as per instructions at <a href="https://people.csail.mit.edu/kaess/apriltags/" target="_blank" rel="noopener">https://people.csail.mit.edu/kaess/apriltags/</a><pre class=" language-bash"><code class="language-bash">  <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> subversion cmake libopencv-dev libeigen3-dev libv4l-dev  <span class="token function">sudo</span> port <span class="token function">install</span> pkgconfig opencv eigen3  svn co https://svn.csail.mit.edu/apriltags  <span class="token function">cd</span> apriltags  <span class="token function">make</span>  ./build/bin/apriltags_demo</code></pre></li><li>Yay, now a window pops open (see “troubleshooting” if it doesn’t, as was the case for me) with a video stream. </li></ul><p>But now we need tags for it to recognize</p><h2 id="Getting-tags"><a href="#Getting-tags" class="headerlink" title="Getting tags"></a>Getting tags</h2><p>I actually found this pretty annoying, the zipped files on those sites give you a thousand options and it’s not clear which ones will work. So for me, I actually had my friend give me four tags that definitely work.</p><p><a href="apriltags_00.png" title="Apriltag ID 0" class="gallery-item"><img src="apriltags_00.png" alt="Apriltag ID 0" style="width: 100px;"></a> ID 0</p><p><a href="apriltags_01.png" title="Apriltag ID 1" class="gallery-item"><img src="apriltags_01.png" alt="Apriltag ID 1" style="width: 100px;"></a> ID 1</p><p><a href="apriltag_06.png" title="Apriltag ID 6" class="gallery-item"><img src="apriltag_06.png" alt="Apriltag ID 6" style="width: 100px;"></a> ID 1</p><p><a href="apriltag_07.png" title="Apriltag ID 7" class="gallery-item"><img src="apriltag_07.png" alt="Apriltag ID 7" style="width: 100px;"></a> ID 7</p><p>Next,</p><ul><li>Print out tag</li><li>Run <pre class=" language-bash"><code class="language-bash">./build/bin/apriltags_demo`</code></pre></li></ul><p>Now stick the tag in front of your camera. In the videostream you should now see a circle. In the terminal you should now see data streaming out.</p><p>The data display shows distance (from the camera to the tag), the xyz location of the center of the tag, as well as the roll, pitch, and yaw. These coordinates will depend on which side you put pointing up when you pasted the tag on, so beware.  In fact, none of the data should be taken as absolute until you calibrate your camera.</p><pre class=" language-bash"><code class="language-bash">2 tags detected: Id: 1 <span class="token punctuation">(</span>Hamming: 0<span class="token punctuation">)</span> distance<span class="token operator">=</span>0.079741m, x<span class="token operator">=</span>0.000532, y<span class="token operator">=</span>0.006102, z<span class="token operator">=</span>-1.487915, yaw<span class="token operator">=</span>-0.134615, pitch<span class="token operator">=</span>0.071828, roll<span class="token operator">=</span>-0.041146Id: 7 <span class="token punctuation">(</span>Hamming: 0<span class="token punctuation">)</span> distance<span class="token operator">=</span>0.079741m, x<span class="token operator">=</span>0.000532, y<span class="token operator">=</span>0.006102, z<span class="token operator">=</span>-1.487915, yaw<span class="token operator">=</span>-0.134615, pitch<span class="token operator">=</span>0.071828, roll<span class="token operator">=</span>-0.04114614.9312 fps</code></pre><p>Two apriltags<br><a href="apriltag.jpg" title="apriltag.jpg" class="gallery-item"><img src="apriltag.jpg" alt="apriltag.jpg"></a></p><p>Apriltag_demo<br><a href="apriltag_demo.jpg" title="apriltag_demo" class="gallery-item"><img src="apriltag_demo.jpg" alt="apriltag_demo"></a></p><h2 id="calibrate-camera"><a href="#calibrate-camera" class="headerlink" title="calibrate camera"></a>calibrate camera</h2><p>I wandered for a while lost in the lands of the official <a href="https://docs.opencv.org/2.4/doc/tutorials/calib3d/camera_calibration/camera_calibration.html" target="_blank" rel="noopener">opencv docs</a>.</p><p>Fortunately, eventually I found my way to a python library that made the whole process super simple. I ignored the above link (to official openCV docs) entirely. Instead, I used the following python package. All I had to do was print out the checkerboard pattern included in the repository, wave it in front of the camera and record a short video, run the python file, and bam! I had the configuration.yaml file I needed.</p><p><a href="https://github.com/smidm/video2calibration" target="_blank" rel="noopener">https://github.com/smidm/video2calibration</a></p><p>To get it working, I did have to make sure I had pyyaml installed</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> nrw@earlgrey:$ <span class="token function">sudo</span> -H pip <span class="token function">install</span> pyyaml --upgrade</code></pre><p>This project is super awesome and included an example you can run right away and inspect. The following line, run in the root takes in the video included in the repo (chessboard.avi) and outputs the resulting configuration file to “calibration.yaml”.</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> nrw@earlgrey:~/projects/video2calibration$ ./calibrate.py example_input/chessboard.avi calibration.yaml --debug-dir out</code></pre><p>At this point I printed out the checkboard pattern included in the repository, put it on a stiff surface, and then opened cheese (you don’t have to use cheese, we just need to record a video).</p><p>Then I waved my board around in front of the camera and recorded a short video.</p><p><a href="0320.png" class="gallery-item"><img src="0320.png" alt=""></a> </p><p><a href="0260.png" class="gallery-item"><img src="0260.png" alt=""></a> </p><p>Anyhow, I record ten or fifteen seconds of video. Then I ran</p><pre class=" language-bash"><code class="language-bash">nrw@earlgrey:~/projects/video2calibration$ ./calibrate.py ~/Videos/Webcam/2018-03-26-112657.webm calibration.yaml --debug-dir outPerforming calibration<span class="token punctuation">..</span>. RMS: 0.442700776066 camera matrix: <span class="token punctuation">[</span><span class="token punctuation">[</span> 666.78668352    0.          343.73827809<span class="token punctuation">]</span> <span class="token punctuation">[</span>   0.          665.79103853  227.19081685<span class="token punctuation">]</span> <span class="token punctuation">[</span>   0.            0.            1.        <span class="token punctuation">]</span><span class="token punctuation">]</span> distortion coefficients:  <span class="token punctuation">[</span>  6.06301194e-02  -1.94620209e-02   1.45555284e-04   1.24410189e-03 -2.51439333e-01<span class="token punctuation">]</span></code></pre><h2 id="Input-calibration-parameters-into-source-code"><a href="#Input-calibration-parameters-into-source-code" class="headerlink" title="Input calibration parameters into source code"></a>Input calibration parameters into source code</h2><p>Edit into the demo file</p><pre class=" language-bash"><code class="language-bash">nrw@earlgrey:~/projects/apriltags/example$ <span class="token function">vi</span> apriltags_demo.cpp</code></pre><p>Specifically, we want to change the following section. Note that we are using the definition of the rotation matrix to pull out (from the calibration.yaml output) the focal point and principal point parameters.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">// default constructor</span>  <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token comment" spellcheck="true">// default settiwgs, most can be modified through command line options (see below)</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>excerpted section<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>    <span class="token function">m_width</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">m_height</span><span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">m_tagSize</span><span class="token punctuation">(</span><span class="token number">0.00944</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// in meters</span>    <span class="token function">m_fx</span><span class="token punctuation">(</span><span class="token number">667</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// in pixels</span>    <span class="token function">m_fy</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//</span>    <span class="token function">m_px</span><span class="token punctuation">(</span><span class="token number">344</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// principal point</span>    <span class="token function">m_py</span><span class="token punctuation">(</span><span class="token number">227</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>Ah! I forgot, we also needed to measure, using a ruler (or calipers), the size of the apriltag in real life. So just measure one of the sides of the tag (which should be square…) and put it inoto m_tagSize. (The width and height should be the size in pixels of the image from the video camera).</p><p>Compile and run (use “make clean” if the build fails, then run “make” again)</p><pre class=" language-bash"><code class="language-bash">nrw@earlgrey:~/projects/apriltags/example$ <span class="token function">cd</span> <span class="token punctuation">..</span>nrw@earlgrey:~/projects/apriltags/example$ <span class="token function">make</span></code></pre><p>Then run the program:</p><pre class=" language-bash"><code class="language-bash">nrw@earlgrey:~/projects/apriltags/$ ./build/bin/apriltag_demo</code></pre><p>One easy way to double-check whether the camera is roughly calibrated is to physically measure the distance between the camera and the tag, and then compare to the “distance” output in your terminal. Hopefully they match…</p><h2 id="Units"><a href="#Units" class="headerlink" title="Units"></a>Units</h2><p>The roll, pitch, and yaw are reported in radians. To convert into degrees, multiply by 57.3 (approximately).</p><h2 id="Framerate"><a href="#Framerate" class="headerlink" title="Framerate"></a>Framerate</h2><p>A framerate of 17fps or so is totally reasonable, since the apriltags demo is decently compute intensive. I had a problem with lag, where the video ran smoothly but with a significant lag – this may have been a result of me running the entire thing in a virtual machine. Let me know if you don’t have lag!</p><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><p>I had a somewhat frustrating beginning where I couldn’t get the example program to run.</p><pre class=" language-bash"><code class="language-bash">-- Found OpenCV: /opt/ros/lunar <span class="token punctuation">(</span>found version <span class="token string">"3.3.1"</span><span class="token punctuation">)</span> framerate <span class="token punctuation">(</span>17fps raesonable, but lag???<span class="token punctuation">)</span> output is <span class="token keyword">in</span> radians 9.23346 fps 0 tags detected: 0 tags detected: 0 tags detected: 0 tags detected: 0 tags detected: 0 tags detected: 0 tags detected: 0 tags detected: 1 tags detected: OpenCV Error: Assertion failed <span class="token punctuation">(</span>mtype <span class="token operator">==</span> type0 <span class="token operator">||</span> <span class="token variable"><span class="token punctuation">((</span><span class="token punctuation">((</span><span class="token punctuation">(</span>mtype<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">((</span><span class="token number">512</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">))</span></span> <span class="token operator">>></span> 3<span class="token punctuation">)</span> + 1<span class="token punctuation">)</span> <span class="token operator">==</span> 1 <span class="token operator">&amp;&amp;</span> <span class="token variable"><span class="token punctuation">((</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> type0<span class="token punctuation">)</span> <span class="token operator">&amp;</span> fixedDepthMask<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">))</span></span> <span class="token keyword">in</span> create, <span class="token function">file</span> /tmp/binarydeb/ros-lunar-opencv3-3.3.1/modules/core/src/matrix.cpp, line 2542 terminate called after throwing an instance of <span class="token string">'cv::Exception'</span> what<span class="token punctuation">(</span><span class="token punctuation">)</span>:  /tmp/binarydeb/ros-lunar-opencv3-3.3.1/modules/core/src/matrix.cpp:2542: error: <span class="token punctuation">(</span>-215<span class="token punctuation">)</span> mtype <span class="token operator">==</span> type0 <span class="token operator">||</span> <span class="token variable"><span class="token punctuation">((</span><span class="token punctuation">((</span><span class="token punctuation">(</span>mtype<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">((</span><span class="token number">512</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">))</span></span> <span class="token operator">>></span> 3<span class="token punctuation">)</span> + 1<span class="token punctuation">)</span> <span class="token operator">==</span> 1 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">((</span>1 <span class="token operator">&lt;&lt;</span> type0<span class="token punctuation">)</span> <span class="token operator">&amp;</span> fixedDepthMask<span class="token punctuation">)</span> <span class="token operator">!=</span> 0<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">function</span> createId: 15 <span class="token punctuation">(</span>Hamming: 1<span class="token punctuation">)</span>Aborted <span class="token punctuation">(</span>core dumped<span class="token punctuation">)</span></code></pre><p>It turned out that because I had ROS installed, or perhaps also because I installed the “apriltags” ROS wrapper, I was having openCV version conflicts.</p><pre class=" language-bash"><code class="language-bash">/tmp/binarydeb/ros-lunar-opencv3-3.3.1</code></pre><p>vs</p><pre class=" language-bash"><code class="language-bash">rw@earlgrey:~$ pkg-config --modversion opencv    2.4.9.1</code></pre><p>To solve, I simply had to edit one line in the CMakeLists.txt to force it to use the right version of openCV. I added an “exact required” tag, along with my openCV version (2.4.9.1), to the appropriate line.</p><pre class=" language-bash"><code class="language-bash">nrw@earlgrey:~/projects/apriltags$ <span class="token function">vi</span> CMakeLists.txt     <span class="token punctuation">(</span>line 14<span class="token punctuation">)</span>    find_package<span class="token punctuation">(</span>OpenCV 2.4.9.1 EXACT REQUIRED<span class="token punctuation">)</span></code></pre><p>Then I ran “make” and then the program itself</p><pre class=" language-bash"><code class="language-bash">nrw@earlgrey:~/projects/apriltags/$ ./build/bin/apriltag_demo</code></pre><p>and the example program worked! Huzzah.</p><h3 id="the-end"><a href="#the-end" class="headerlink" title="the end."></a>the end.</h3></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
    </entry>
    
  
  
</search>
